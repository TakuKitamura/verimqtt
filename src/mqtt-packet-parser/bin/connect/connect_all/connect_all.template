connect.connect_id.utf8_string_length = 10 // type:uint16_t, max_u16:65535
connect.connect_id.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
connect.connect_id.utf8_string_value = "connect_id" // type:uint8_t*, can use uint8_array
connect.flags.clean_start = 1 // type:uint8_t, max_u8:255
connect.flags.connect_flag = 198 // type:uint8_t, max_u8:255
connect.flags.password = 1 // type:uint8_t, max_u8:255
connect.flags.user_name = 1 // type:uint8_t, max_u8:255
connect.flags.will_flag = 1 // type:uint8_t, max_u8:255
connect.flags.will_qos = 0 // type:uint8_t, max_u8:255
connect.flags.will_retain = 0 // type:uint8_t, max_u8:255
connect.keep_alive = 60 // type:uint16_t, max_u16:65535
connect.protocol_name = "MQTT" // type:const char*, can use uint8_array
connect.protocol_version = 5 // type:uint8_t, max_u8:255
connect.user_name.utf8_string_length = 4 // type:uint16_t, max_u16:65535
connect.user_name.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
connect.user_name.utf8_string_value = "user" // type:uint8_t*, can use uint8_array
connect.password.binary_length = 8 // type:uint16_t, max_u16:65535
connect.password.binary_value = "password" // type:uint8_t*, can use uint8_array
connect.password.is_valid_binary_data = true // type:bool
connect.will.connect_will_payload.binary_length = 12 // type:uint16_t, max_u16:65535
connect.will.connect_will_payload.binary_value = "will_payload" // type:uint8_t*, can use uint8_array
connect.will.connect_will_payload.is_valid_binary_data = true // type:bool
connect.will.connect_will_property.property_id = 3 // type:uint8_t, max_u8:255
connect.will.connect_will_property.property_type_id = 4 // type:uint8_t, max_u8:255
connect.will.connect_will_property.property_type_struct.property_type_error.property_error_code = 0 // type:uint8_t, max_u8:255
connect.will.connect_will_property.property_type_struct.property_type_error.property_error_code_name = "" // type:const char*, can use uint8_array
connect.will.connect_will_property.property_type_struct.utf8_encoded_string_struct.utf8_string_length = 17 // type:uint16_t, max_u16:65535
connect.will.connect_will_property.property_type_struct.utf8_encoded_string_struct.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
connect.will.connect_will_property.property_type_struct.utf8_encoded_string_struct.utf8_string_value = "will_content_type" // type:uint8_t*, can use uint8_array
connect.will.connect_will_topic_name.utf8_string_length = 10 // type:uint16_t, max_u16:65535
connect.will.connect_will_topic_name.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
connect.will.connect_will_topic_name.utf8_string_value = "will_topic" // type:uint8_t*, can use uint8_array
error.code = 0 // type:uint8_t, max_u8:255
error.message = "" // type:const char*, can use uint8_array
flags.flag = 0 // type:uint8_t, max_u8:255
message_name = "CONNECT" // type:const char*, can use uint8_array
message_type = 1 // type:uint8_t, max_u8:255
property.property_id = 38 // type:uint8_t, max_u8:255
property.property_type_id = 7 // type:uint8_t, max_u8:255
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_key.utf8_string_length = 7 // type:uint16_t, max_u16:65535
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_key.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_key.utf8_string_value = "connect" // type:uint8_t*, can use uint8_array
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_value.utf8_string_length = 13 // type:uint16_t, max_u16:65535
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_value.utf8_string_status_code = 0 // type:uint8_t, max_u8:255
property.property_type_struct.utf8_string_pair_struct.utf8_string_pair_value.utf8_string_value = "user_property" // type:uint8_t*, can use uint8_array
remaining_length = 114 // type:uint32_t, max_u32:4294967295
